{"version":3,"file":"TimeUtil.js","sources":["../../../../src/util/TimeUtil.js"],"sourcesContent":["import toMilliseconds from '@sindresorhus/to-milliseconds';\nimport parseMs from 'parse-ms';\n\nconst MS_PER_DAY = 60 * 60 * 24 * 1000;\n\nconst MOMENT_UNIT = {\n  MILLISECOND: 'milliseconds',\n  SECOND: 'seconds',\n  MINUTE: 'minutes',\n  HOUR: 'hours',\n  DAY: 'days',\n};\n\nconst MOMENT_UNIT_KEYS = Object.keys(MOMENT_UNIT);\n\n/**\n * @method convertMomentUnits\n * Conversion between moment's units and our units internally\n *\n * @param {String} momentUnit The units that val is in\n * @return {String} The key in the MOMENT_UNIT hash\n */\nconst convertMomentUnits = function(momentUnit) {\n  const entry = MOMENT_UNIT_KEYS.filter(k => MOMENT_UNIT[k] === momentUnit);\n\n  return entry.length === 1 ? entry[0] : momentUnit;\n};\n\nexport default {\n  /**\n   * @method getTimeInHighestRelevantUnit\n   * Will return a number in the units of the highest relevant time unit.\n   * Only checks milliseconds, seconds, minutes, hours, and days.\n   * E.g.\n   *   15 MINUTE  -> 15 MINUTE\n   *   15 minutes -> 15 MINUTE\n   *   60 minutes ->  1 HOUR\n   *   90 minutes -> 90 MINUTE\n   *   24 HOUR    ->  1 DAY\n   *   24 hours   ->  1 DAY\n   *   30 DAY     -> 30 DAY\n   *\n   * @typedef { \"MILLISECOND\" | \"SECOND\" | \"MINUTE\" | \"HOUR\" | \"DAY\" } TimeUnit\n   *\n   * @typedef { \"MILLISECOND\" | \"SECOND\" | \"MINUTE\" | \"HOUR\" | \"DAY\" |\n   *            \"milliseconds\" | \"seconds\" | \"minutes\" | \"hours\" | \"days\"\n   *          } FlexibleTimeUnit\n   *\n   * @typedef TimeAndUnit\n   * @property {number} time the consolidated time\n   * @property {TimeUnit} unit the unit of the time\n   *\n   * @param {FlexibleTimeUnit} unit The time unit\n   * @return {TimeAndUnit} An object containing the amount of time and the unit\n   */\n  getTimeInHighestRelevantUnit: function(val, unit) {\n    const defaultTimeObj = {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      milliseconds: 0,\n    };\n    const normalizedUnit = MOMENT_UNIT[unit] || unit;\n    let timeObj;\n\n    try {\n      const ms = toMilliseconds(Object.assign(defaultTimeObj, { [normalizedUnit]: val }));\n      timeObj = parseMs(ms);\n    } catch (error) {\n      timeObj = {};\n    }\n\n    const duration = Object.keys(timeObj).reduce((init, k) => {\n      if (timeObj[k] !== 0) {\n        init[k] = timeObj[k];\n      }\n      return init;\n    }, {});\n\n    let highestUnit;\n    let time;\n    if (Object.keys(duration).length === 1) {\n      Object.keys(duration).forEach(k => {\n        time = duration[k];\n        highestUnit = k;\n      });\n    } else {\n      time = val;\n      highestUnit = normalizedUnit;\n    }\n\n    return {\n      time: time,\n      unit: convertMomentUnits(highestUnit),\n    };\n  },\n\n  /**\n   * @method formatDateToDeviceAssuranceGracePeriodExpiryLocaleString\n   * Conversion from a Date object to a locale string that mimics Okta's `short-with-timezone` format\n   * but rounded down to the nearest hour\n   * e.g. new Date(2024-09-05T00:00:00.000Z) -> 09/05/2024, 8:00 PM EDT\n   *\n   * @param {Date} date The Date object for the grace period expiry\n   * @param {LanguageCode} languageCode The user's language code / locale\n   * @param {RoundDownToNearestHour} boolean Whether to round down to nearest hour. Defaults to true\n   * @return {string} The formatted `short-with-timezone` local string\n   */\n  formatDateToDeviceAssuranceGracePeriodExpiryLocaleString: (date, languageCode, roundDownToNearestHour = true) => {\n    try {\n    // Invalid Date objects will return NaN for valueOf()\n      if (date && !isNaN(date.valueOf()) && languageCode !== null) {\n        // eslint-disable-next-line max-depth\n        if (roundDownToNearestHour) {\n          // Round down the date to the nearest hour\n          date.setMinutes(0, 0, 0);\n        }\n        return date.toLocaleString(languageCode, {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          timeZoneName: 'short',\n        });\n      } else {\n        return null;\n      }\n    } catch (e) {\n      // If `languageCode` isn't in a valid format `toLocaleString()` will throw a `RangeError`\n      return null;\n    }\n  },\n  \n  /**\n   * @method calculateDaysBetween\n   * Calculate the number of days between two epoch milliseconds timestamps\n   * rounded down to the nearest day\n   *\n   * @param {Integer} epoch1 epoch timestamp in milliseconds as an integer\n   * @param {Integer} epoch2 epoch timestamp in milliseconds as an integer\n   * @return {Integer} The number of days between the two epoch timestamps\n   */\n  calculateDaysBetween(epoch1, epoch2) {\n    try {\n      if (typeof epoch1 === 'number' && typeof epoch2 === 'number') {\n        const diffInMs = Math.abs(epoch2 - epoch1);\n      \n        const days = Math.floor(diffInMs / MS_PER_DAY);\n    \n        return days;\n      }\n    } catch (e) {\n      // continue even with error\n    }\n    return null;\n  }\n};\n"],"names":["MS_PER_DAY","MOMENT_UNIT","MILLISECOND","SECOND","MINUTE","HOUR","DAY","MOMENT_UNIT_KEYS","Object","keys","convertMomentUnits","momentUnit","entry","filter","k","length","getTimeInHighestRelevantUnit","val","unit","defaultTimeObj","days","hours","minutes","seconds","milliseconds","normalizedUnit","timeObj","ms","toMilliseconds","assign","parseMs","error","duration","reduce","init","highestUnit","time","forEach","formatDateToDeviceAssuranceGracePeriodExpiryLocaleString","date","languageCode","roundDownToNearestHour","isNaN","valueOf","setMinutes","toLocaleString","year","month","day","hour","minute","timeZoneName","e","calculateDaysBetween","epoch1","epoch2","diffInMs","Math","abs","floor"],"mappings":"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"}