{"version":3,"file":"FormController.js","sources":["../../../../../src/v2/controllers/FormController.ts"],"sourcesContent":["/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { _, Controller, loc } from '@okta/courage';\nimport ViewFactory from '../view-builder/ViewFactory';\nimport IonResponseHelper from '../ion/IonResponseHelper';\nimport { getV1ClassName } from '../ion/ViewClassNamesFactory';\nimport {\n  FORMS, TERMINAL_FORMS, FORM_NAME_TO_OPERATION_MAP, ORG_PASSWORD_RECOVERY_LINK\n} from '../ion/RemediationConstants';\nimport transformPayload from '../ion/payloadTransformer';\nimport Util from 'util/Util';\nimport sessionStorageHelper from '../client/sessionStorageHelper';\nimport { HttpResponse, IdxStatus, ProceedOptions } from '@okta/okta-auth-js';\nimport { EventErrorContext } from 'types/events';\nimport { CONFIGURED_FLOW } from '../client/constants';\nimport { ConfigError } from 'util/Errors';\nimport { updateAppState } from 'v2/client';\nimport CookieUtil from '../../util/CookieUtil';\n\nexport interface ContextData {\n  controller: string;\n  formName: string;\n  authenticatorKey?: string;\n  methodType?: string;\n}\n\nexport default Controller.extend({\n  className: 'form-controller',\n\n  appStateEvents: {\n    'change:currentFormName': 'handleFormNameChange',\n    'afterError': 'handleAfterError',\n    'invokeAction': 'handleInvokeAction',\n    'saveForm': 'handleSaveForm',\n    'switchForm': 'handleSwitchForm',\n  },\n\n  preRender() {\n    this.removeChildren();\n  },\n\n  postRender() {\n    const currentViewState = this.options.appState.getCurrentViewState();\n    // TODO: add comments regarding when `currentViewState` would be null?\n    if (!currentViewState) {\n      return;\n    }\n\n    this.clearMetadata();\n\n    let formName = currentViewState.name;\n    if (formName === 'identify' && this.options.settings.get('flow') === CONFIGURED_FLOW.RESET_PASSWORD) {\n      formName = 'identify-recovery';\n    }\n    const TheView = ViewFactory.create(\n      formName,\n      this.options.appState.get('authenticatorKey'),\n    );\n    try {\n      this.formView = this.add(TheView, {\n        options: {\n          currentViewState,\n        }\n      }).last();\n    } catch (error) {\n      // This is the place where runtime error (NPE) happens at most of time.\n      // It has been swallowed by Q.js hence add try/catch to surface up errors.\n      this.options.settings.callGlobalError(error);\n      return;\n    }\n\n    this.triggerAfterRenderEvent();\n  },\n\n  clearMetadata() {\n    const formName = this.options.appState.get('currentFormName');\n    // TODO: OKTA-392835 shall not clear state handle at terminal page\n    if (TERMINAL_FORMS.includes(formName)) {\n      sessionStorageHelper.removeStateHandle();\n    }\n  },\n\n  triggerAfterRenderEvent() {\n    const contextData = this.createAfterEventContext();\n    this.trigger('afterRender', contextData);\n  },\n\n  handleFormNameChange() {\n    // OKTA-803760 - Fix: close opened dropdown\n    this.$el.click();\n\n    this.render();\n  },\n\n  handleAfterError(error: HttpResponse) {\n    const contextData = this.createAfterEventContext();\n    const errorContextData: EventErrorContext = {\n      xhr: error,\n      errorSummary: error.responseJSON && error.responseJSON.errorSummary,\n    };\n    // TODO: need some enhancement after https://github.com/okta/okta-idx-js/pull/27\n    // OKTA-318062\n    this.trigger('afterError', contextData, errorContextData);\n  },\n\n  createAfterEventContext(): ContextData {\n    const formName = this.options.appState.get('currentFormName');\n    const authenticatorKey = this.options.appState.get('authenticatorKey');\n    const methodType = this.options.appState.get('authenticatorMethodType');\n    const isPasswordRecoveryFlow = this.options.appState.get('isPasswordRecoveryFlow');\n\n    const v1ControllerClassName = getV1ClassName(\n      formName,\n      authenticatorKey,\n      methodType,\n      isPasswordRecoveryFlow,\n    );\n\n    const eventData: ContextData = {\n      controller: v1ControllerClassName,\n      formName,\n    };\n\n    if (authenticatorKey) {\n      eventData.authenticatorKey = authenticatorKey;\n    }\n    if (methodType) {\n      eventData.methodType = methodType;\n    }\n\n    return eventData;\n  },\n\n  handleSwitchForm(formName) {\n    // trigger formName change to change view\n    if (this.options.appState.get('messages')) {\n      // Clear messages before calling switch form.\n      // If a form has errors sent form API inside messages\n      // and user hits back to factors list which triggers switchForm,\n      // those error will show up on another screen that gets rendered after switchForm\n      this.options.appState.unset('messages');\n    }\n    this.options.appState.set('currentFormName', formName);\n  },\n\n  // eslint-disable-next-line max-statements\n  async handleInvokeAction(actionPath = '', actionParams = {}, showFormErrors = true) {\n    const { appState, settings } = this.options;\n\n    // For self-hosted scenario we need to start reset flow at identify page from scratch.\n    //  (Reusing state handle of transaction after failed sign-in attempt for reset flow is error prone)\n    // For Okta-hosted scenario we don't need to cancel/restart flow because SIW receives fresh state token\n    //  from backend on page load and doesn't save state handle to session storage after error.\n    if (actionPath === ORG_PASSWORD_RECOVERY_LINK && settings.get('oauth2Enabled')) {\n      appState.trigger('restartLoginFlow', 'resetPassword');\n      return;\n    }\n  \n    const idx = appState.get('idx');\n    const { stateHandle } = idx.context;\n    let invokeOptions: ProceedOptions = {\n      exchangeCodeForTokens: false, // we handle this in interactionCodeFlow.js\n      stateHandle\n    };\n    let error;\n\n    // Cancel action is executes synchronously\n    if (actionPath === 'cancel') {\n      // TODO: resolve race conditions caused by event pattern: OKTA-490220\n      settings.getAuthClient().transactionManager.clear({ clearIdxResponse: false });\n      sessionStorageHelper.removeStateHandle();\n      appState.clearAppStateCache();\n\n      if (settings.get('oauth2Enabled')) {\n        // In this case we need to restart login flow and recreate transaction meta\n        // that will be used in interactionCodeFlow function\n        appState.trigger('restartLoginFlow');\n        return;\n      }\n    }\n\n    const invokeableForms = [FORMS.LAUNCH_AUTHENTICATOR, FORMS.CHALLENGE_WEBAUTHN_AUTOFILLUI_AUTHENTICATOR];\n    if (invokeableForms.includes(actionPath) && actionParams) {\n      //https://oktainc.atlassian.net/browse/OKTA-562885  a temp solution to send rememberMe when click the launch OV buttion.\n      //will redesign to handle FastPass silent probing case where no username and rememberMe opiton at all.\n      invokeOptions = {\n        ...invokeOptions,\n        actions: [{\n          name: actionPath,\n          params: actionParams\n        }]\n      };\n    } else if (idx['neededToProceed'].find(item => item.name === actionPath)) {\n      invokeOptions = { ...invokeOptions, step: actionPath };\n    } else if (_.isFunction(idx['actions'][actionPath])) {\n      invokeOptions = {\n        ...invokeOptions,\n        actions: [{\n          name: actionPath,\n          params: actionParams\n        }]\n      };\n    } else {\n      error = new ConfigError(`Invalid action selected: ${actionPath}`);\n      this.options.settings.callGlobalError(error);\n      if (showFormErrors) {\n        await this.showFormErrors(this.formView.model, error, this.formView.form);\n      }\n      return;\n    }\n\n    // action will be executed asynchronously\n    await this.invokeAction(invokeOptions);\n  },\n\n  async invokeAction(invokeOptions) {\n    const authClient = this.options.settings.getAuthClient();\n    let resp;\n    let error;\n    try {\n      resp = await authClient.idx.proceed(invokeOptions);\n      if (resp.requestDidSucceed === false) {\n        error = resp;\n      }\n    } catch (e) {\n      error = e;\n    }\n\n    // if request did not succeed, show error on the current form\n    if (error) {\n      await this.showFormErrors(this.formView.model, error, this.formView.form);\n      return;\n    }\n\n    // process response, may render a new form\n    await this.handleIdxResponse(resp);\n  },\n\n  // eslint-disable-next-line max-statements, complexity\n  async handleSaveForm(model) {\n    const formName = model.get('formName');\n\n    // Toggle Form saving status (e.g. disabling save button, etc)\n    this.toggleFormButtonState(true);\n    model.trigger('request');\n\n    // Use full page redirection if necessary\n    if (model.get('useRedirect')) {\n      // Clear when navigates away from SIW page, e.g. success, IdP Authenticator.\n      // Because SIW sort of finished its current /transaction/\n      sessionStorageHelper.removeStateHandle();\n\n      const currentViewState = this.options.appState.getCurrentViewState();\n      // OKTA-702402: redirect only if/when the page is visible\n      Util.executeOnVisiblePage(() => {\n        Util.redirectWithFormGet(currentViewState.href);\n      });\n\n      return;\n    }\n\n    const payload = transformPayload(formName, model);\n    // NOTE: this line should be called before triggering transformIdentifier\n    const originalIdentifier = payload.identifier;\n    // Run hook: transform the user name (a.k.a identifier)\n    const values = this.transformIdentifier(formName, payload);\n\n    // widget rememberMe feature stores the entered identifier in a cookie, to pre-fill the form on subsequent visits to page\n    if (this.options.settings.get('features.rememberMe')) {\n      if (originalIdentifier) {\n        CookieUtil.setUsernameCookie(originalIdentifier);\n      }\n    }\n    else {\n      CookieUtil.removeUsernameCookie();\n    }\n\n    // Error out when this is not a remediation form. Unexpected Exception.\n    if (!this.options.appState.hasRemediationObject(formName)) {\n      this.options.settings.callGlobalError(`Cannot find http action for \"${formName}\".`);\n      await this.showFormErrors(this.formView.model, 'Cannot find action to proceed.', this.formView.form);\n      return;\n    }\n\n    // Reset password in identity-first flow needs some help to auto-select password and begin the reset flow\n    if (formName === 'identify' && this.options.settings.get('flow') === CONFIGURED_FLOW.RESET_PASSWORD) {\n      values.authenticator = 'okta_password';\n    }\n\n    // Submit request to idx endpoint\n    const authClient = this.options.settings.getAuthClient();\n    const idxOptions: ProceedOptions = {\n      exchangeCodeForTokens: false, // we handle this in interactionCodeFlow.js\n    };\n    try {\n      const idx = this.options.appState.get('idx');\n      const { stateHandle } = idx.context;\n      const resp = await authClient.idx.proceed({\n        ...idxOptions,\n        step: formName,\n        stateHandle,\n        ...values\n      });\n\n      if (resp.status === IdxStatus.FAILURE) {\n        throw resp.error; // caught and handled in this function\n      }\n      // follow idx transaction to render terminal view for session expired error\n      if (IonResponseHelper.isIdxSessionExpiredError(resp)) {\n        const authClient = this.settings.getAuthClient();\n        authClient.transactionManager.clear();\n        await this.handleIdxResponse(resp);\n        return;\n      }\n      // If the last request did not succeed, show errors on the current form\n      // Special case: Okta server responds 401 status code with WWW-Authenticate header and new remediation\n      // so that the iOS/MacOS credential SSO extension (Okta Verify) can intercept\n      // the response reaches here when Okta Verify is not installed\n      // we need to return an idx object so that\n      // the SIW can proceed to the next step without showing error\n      if (resp.requestDidSucceed === false && !resp.stepUp) {\n        await this.showFormErrors(model, resp, this.formView.form);\n        return;\n      }\n      const onSuccess = this.handleIdxResponse.bind(this, resp);\n      if (formName === FORMS.ENROLL_PROFILE) {\n        // call registration (aka enroll profile) hook\n        this.settings.postRegistrationSubmit(values?.userProfile?.email, onSuccess, (error) => {\n          model.trigger('error', model, {\n            responseJSON: error,\n          });\n        });\n      } else {\n        await onSuccess();\n      }\n    } catch(error) {\n      if (error.is?.('terminal')) {\n        this.options.appState.setNonIdxError(error);\n      } else {\n        await this.showFormErrors(model, error, this.formView.form);\n      }\n    } finally {\n      this.toggleFormButtonState(false);\n    }\n  },\n\n  transformIdentifier(formName, modelJSON) {\n    if (Object.prototype.hasOwnProperty.call(modelJSON, 'identifier')) {\n      // The callback function is passed two arguments:\n      // 1) username: The name entered by the user\n      // 2) operation: The type of operation the user is trying to perform:\n      //      - PRIMARY_AUTH\n      //      - FORGOT_PASSWORD\n      //      - UNLOCK_ACCOUNT\n      const operation = FORM_NAME_TO_OPERATION_MAP[formName];\n      modelJSON.identifier = this.settings.transformUsername(modelJSON.identifier, operation);\n    }\n    return modelJSON;\n  },\n\n  /**\n   * @param model current form model\n   * @param error any errors after user action\n   * @param form current form\n   * Handle errors that get displayed right after any user action. After such form errors widget doesn't\n   * reload or re-render, but updates the AppSate with latest remediation.\n   */\n  async showFormErrors(model, error, form) {\n    /* eslint max-statements: [2, 24] */\n    let errorObj;\n    let idxStateError;\n    let showErrorBanner = true;\n    model.trigger('clearFormError');\n\n    if (!error) {\n      error = 'FormController - unknown error found';\n      this.options.settings.callGlobalError(error);\n    }\n\n    if(error?.rawIdxState) {\n      idxStateError = error;\n      error = error.rawIdxState;\n    }\n\n    if (IonResponseHelper.isIonErrorResponse(error)) {\n      errorObj = IonResponseHelper.convertFormErrors(error);\n    } else if (error.errorSummary) {\n      errorObj = { responseJSON: error };\n    } else {\n      Util.logConsoleError(error);\n      errorObj = { responseJSON: { errorSummary: loc('error.unsupported.response', 'login')}};\n    }\n\n    if(_.isFunction(form?.showCustomFormErrorCallout)) {\n      showErrorBanner = !form.showCustomFormErrorCallout(errorObj, idxStateError?.messages);\n    }\n\n    // show error before updating app state.\n    model.trigger('error', model, errorObj, showErrorBanner);\n    idxStateError = Object.assign({}, idxStateError, {hasFormError: true});\n\n    // OKTA-725716: Don't save failed IDX response to state\n  },\n\n  async handleIdxResponse(idxResp) {\n    await updateAppState(this.options.appState, idxResp);\n  },\n\n  /**\n   * SignIn widget has its own (hacky) way to customize the button disabled state:\n   * adding `link-button-disabled` despite the name was intend only to disable\n   * `link-button`.\n   * Instead of doing decent refactor, we want to follow the convention for now.\n   *\n   * @param {boolean} disabled whether add extra disable CSS class.\n   */\n  toggleFormButtonState: function(disabled) {\n    const button = this.$el.find('.o-form-button-bar .button');\n    button.toggleClass('link-button-disabled', disabled);\n  },\n});\n"],"names":["Controller","extend","className","appStateEvents","preRender","removeChildren","postRender","currentViewState","options","appState","getCurrentViewState","clearMetadata","formName","name","settings","get","CONFIGURED_FLOW","RESET_PASSWORD","TheView","ViewFactory","create","formView","add","last","error","callGlobalError","triggerAfterRenderEvent","TERMINAL_FORMS","includes","sessionStorageHelper","removeStateHandle","contextData","createAfterEventContext","trigger","handleFormNameChange","$el","click","render","handleAfterError","errorContextData","xhr","errorSummary","responseJSON","authenticatorKey","methodType","isPasswordRecoveryFlow","v1ControllerClassName","getV1ClassName","eventData","controller","handleSwitchForm","unset","set","handleInvokeAction","actionPath","actionParams","showFormErrors","ORG_PASSWORD_RECOVERY_LINK","idx","stateHandle","context","invokeOptions","exchangeCodeForTokens","getAuthClient","transactionManager","clear","clearIdxResponse","clearAppStateCache","invokeableForms","FORMS","LAUNCH_AUTHENTICATOR","CHALLENGE_WEBAUTHN_AUTOFILLUI_AUTHENTICATOR","actions","params","find","item","step","_","isFunction","ConfigError","model","form","invokeAction","authClient","resp","proceed","requestDidSucceed","e","handleIdxResponse","handleSaveForm","toggleFormButtonState","Util","executeOnVisiblePage","redirectWithFormGet","href","payload","transformPayload","originalIdentifier","identifier","values","transformIdentifier","CookieUtil","setUsernameCookie","removeUsernameCookie","hasRemediationObject","authenticator","idxOptions","status","IdxStatus","FAILURE","IonResponseHelper","isIdxSessionExpiredError","stepUp","onSuccess","bind","ENROLL_PROFILE","_values$userProfile","postRegistrationSubmit","userProfile","email","_error$is","is","call","setNonIdxError","modelJSON","Object","prototype","hasOwnProperty","operation","FORM_NAME_TO_OPERATION_MAP","transformUsername","_error","errorObj","idxStateError","showErrorBanner","rawIdxState","isIonErrorResponse","convertFormErrors","logConsoleError","loc","showCustomFormErrorCallout","_idxStateError","messages","assign","hasFormError","idxResp","updateAppState","disabled","button","toggleClass"],"mappings":"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"}