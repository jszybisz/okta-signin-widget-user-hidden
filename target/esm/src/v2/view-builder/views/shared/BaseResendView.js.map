{"version":3,"file":"BaseResendView.js","sources":["../../../../../../../src/v2/view-builder/views/shared/BaseResendView.js"],"sourcesContent":["import { View } from '@okta/courage';\nimport { SHOW_RESEND_TIMEOUT } from '../../utils/Constants';\nimport sessionStorageHelper from '../../../client/sessionStorageHelper';\n\nexport default View.extend({\n\n  postRender() {\n    this.showCalloutAfterTimeout();\n  },\n\n  showCalloutAfterTimeout() {\n    const timeStamp = sessionStorageHelper.getResendTimestamp();\n    if (!timeStamp) {\n      sessionStorageHelper.setResendTimestamp(Date.now());\n    }\n\n    // We keep track of a 'global' timestamp in sessionStorage because if the SIW does a re-render,\n    // we don't want to force the user to wait another 30s again to see the resend link. With this\n    // the user will wait AT MOST 30s until they see the resend link.\n    this.showMeInterval = setInterval(() => {\n      const start = sessionStorageHelper.getResendTimestamp();\n      const now = Date.now();\n      if (now - start >= SHOW_RESEND_TIMEOUT) {\n        this.$el.removeClass('hide');\n        clearInterval(this.showMeInterval);\n        sessionStorageHelper.removeResendTimestamp();\n      }\n    }, 250);\n  },\n\n  remove() {\n    View.prototype.remove.apply(this, arguments);\n    clearInterval(this.showMeInterval);\n\n    const formName = this.options.appState.get('currentFormName');\n    const resendContext = this.options.appState.get('currentAuthenticator')?.resend \n      || this.options.appState.get('currentAuthenticatorEnrollment')?.resend;\n    const didFormNameChange = this.options.model.get('formName') !== formName;\n\n    // Clear resend timeStamp whenever we change views (this means we're navigating away from the resend view)\n    if (sessionStorageHelper.getResendTimestamp()\n      && (!resendContext || didFormNameChange)) {\n      sessionStorageHelper.removeResendTimestamp();\n    }    \n  },\n});\n"],"names":["View","extend","postRender","showCalloutAfterTimeout","timeStamp","sessionStorageHelper","getResendTimestamp","setResendTimestamp","Date","now","showMeInterval","setInterval","start","SHOW_RESEND_TIMEOUT","$el","removeClass","clearInterval","removeResendTimestamp","remove","_this$options$appStat","_this$options$appStat2","prototype","apply","arguments","formName","options","appState","get","resendContext","resend","didFormNameChange","model"],"mappings":";;;;;;;;;;;;;AAIA,qBAAeA,IAAI,CAACC,MAAM,CAAC;EAEzBC,UAAU,EAAA,YAAG;IACX,IAAI,CAACC,uBAAuB,EAAE,CAAA;GAC/B;EAEDA,uBAAuB,EAAA,YAAG;AACxB,IAAA,MAAMC,SAAS,GAAGC,oBAAoB,CAACC,kBAAkB,EAAE,CAAA;IAC3D,IAAI,CAACF,SAAS,EAAE;MACdC,oBAAoB,CAACE,kBAAkB,CAACC,IAAI,CAACC,GAAG,EAAE,CAAC,CAAA;AACrD,KAAA;;AAEA;AACA;AACA;AACA,IAAA,IAAI,CAACC,cAAc,GAAGC,WAAW,CAAC,MAAM;AACtC,MAAA,MAAMC,KAAK,GAAGP,oBAAoB,CAACC,kBAAkB,EAAE,CAAA;AACvD,MAAA,MAAMG,GAAG,GAAGD,IAAI,CAACC,GAAG,EAAE,CAAA;AACtB,MAAA,IAAIA,GAAG,GAAGG,KAAK,IAAIC,mBAAmB,EAAE;AACtC,QAAA,IAAI,CAACC,GAAG,CAACC,WAAW,CAAC,MAAM,CAAC,CAAA;AAC5BC,QAAAA,aAAa,CAAC,IAAI,CAACN,cAAc,CAAC,CAAA;QAClCL,oBAAoB,CAACY,qBAAqB,EAAE,CAAA;AAC9C,OAAA;KACD,EAAE,GAAG,CAAC,CAAA;GACR;EAEDC,MAAM,EAAA,YAAG;IAAA,IAAAC,qBAAA,EAAAC,sBAAA,CAAA;IACPpB,IAAI,CAACqB,SAAS,CAACH,MAAM,CAACI,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,CAAA;AAC5CP,IAAAA,aAAa,CAAC,IAAI,CAACN,cAAc,CAAC,CAAA;IAElC,MAAMc,QAAQ,GAAG,IAAI,CAACC,OAAO,CAACC,QAAQ,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAAA;AAC7D,IAAA,MAAMC,aAAa,GAAG,CAAA,CAAAT,qBAAA,GAAA,IAAI,CAACM,OAAO,CAACC,QAAQ,CAACC,GAAG,CAAC,sBAAsB,CAAC,MAAAR,IAAAA,IAAAA,qBAAA,uBAAjDA,qBAAA,CAAmDU,MAAM,MAAA,CAAAT,sBAAA,GAC1E,IAAI,CAACK,OAAO,CAACC,QAAQ,CAACC,GAAG,CAAC,gCAAgC,CAAC,MAAA,IAAA,IAAAP,sBAAA,KAA3DA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAA6DS,MAAM,CAAA,CAAA;AACxE,IAAA,MAAMC,iBAAiB,GAAG,IAAI,CAACL,OAAO,CAACM,KAAK,CAACJ,GAAG,CAAC,UAAU,CAAC,KAAKH,QAAQ,CAAA;;AAEzE;IACA,IAAInB,oBAAoB,CAACC,kBAAkB,EAAE,KACvC,CAACsB,aAAa,IAAIE,iBAAiB,CAAC,EAAE;MAC1CzB,oBAAoB,CAACY,qBAAqB,EAAE,CAAA;AAC9C,KAAA;AACF,GAAA;AACF,CAAC,CAAC;;;;"}