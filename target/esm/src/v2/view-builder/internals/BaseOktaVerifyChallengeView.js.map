{"version":3,"file":"BaseOktaVerifyChallengeView.js","sources":["../../../../../../src/v2/view-builder/internals/BaseOktaVerifyChallengeView.js"],"sourcesContent":["/* eslint max-statements: [2, 22] */\nimport { $ } from '@okta/courage';\nimport BaseFormWithPolling from '../internals/BaseFormWithPolling';\nimport Logger from 'util/Logger';\nimport {\n  AUTHENTICATOR_CANCEL_ACTION,\n  AUTHENTICATION_CANCEL_REASONS,\n  CHALLENGE_TIMEOUT,\n} from '../utils/Constants';\nimport BrowserFeatures from 'util/BrowserFeatures';\nimport { \n  doChallenge,\n  cancelPollingWithParams,\n  createInvisibleIFrame,\n} from '../utils/ChallengeViewUtil';\n\nconst request = (opts) => {\n  const ajaxOptions = Object.assign({\n    method: 'GET',\n    contentType: 'application/json',\n  }, opts);\n  return $.ajax(ajaxOptions);\n};\n\nconst Body = BaseFormWithPolling.extend({\n  noButtonBar: true,\n\n  className: 'ion-form device-challenge-poll',\n\n  removed: false,\n\n  events: {\n    'click #launch-ov': function(e) {\n      e.preventDefault();\n      this.doCustomURI();\n    }\n  },\n\n  pollingCancelAction: AUTHENTICATOR_CANCEL_ACTION,\n\n  initialize() {\n    BaseFormWithPolling.prototype.initialize.apply(this, arguments);\n    this.removed = false;\n    this.listenTo(this.model, 'error', this.onPollingFail);\n    this.doChallenge();\n    this.startPolling();\n  },\n\n  doChallenge() {\n    doChallenge(this);\n  },\n\n  onPollingFail() {\n    this.$('.spinner').hide();\n    this.stopPolling();\n  },\n\n  remove() {\n    BaseFormWithPolling.prototype.remove.apply(this, arguments);\n    this.removed = true;\n    this.stopProbing();\n    this.stopPolling();\n  },\n\n  getDeviceChallengePayload() {\n    throw new Error('getDeviceChallengePayload needs to be implemented');\n  },\n\n  doLoopback(deviceChallenge) {\n    let authenticatorDomainUrl = deviceChallenge.domain !== undefined ? deviceChallenge.domain : '';\n    let authenticatorHttpsDomainUrl = deviceChallenge.httpsDomain !== undefined ? deviceChallenge.httpsDomain : '';\n    let ports = deviceChallenge.ports !== undefined ? deviceChallenge.ports : [];\n    let maxNumberOfPorts = ports.length;\n    let challengeRequest = deviceChallenge.challengeRequest !== undefined ? deviceChallenge.challengeRequest : '';\n    let probeTimeoutMillis = deviceChallenge.probeTimeoutMillis !== undefined ?\n      deviceChallenge.probeTimeoutMillis : 100;\n    let currentPort;\n    let foundPort = false;\n    let ovFailed = false;\n    let countFailedPorts = 0;\n\n    const getAuthenticatorUrl = (path, domainUrl) => {\n      return `${domainUrl}:${currentPort}/${path}`;\n    };\n\n    const checkPort = (url) => {\n      return request({\n        url: url,\n        /*\n        OKTA-278573 in loopback server, SSL handshake sometimes takes more than 100ms and thus needs additional\n        timeout however, increasing timeout is a temporary solution since user will need to wait much longer in\n        worst case.\n        TODO: Android timeout is temporarily set to 3000ms and needs optimization post-Beta.\n        OKTA-365427 introduces probeTimeoutMillis; but we should also consider probeTimeoutMillisHTTPS for\n        customizing timeouts in the more costly Android and other (keyless) HTTPS scenarios.\n        */\n        timeout: BrowserFeatures.isAndroid() ? 3000 : probeTimeoutMillis\n      });\n    };\n\n    const onPortFound = (url) => {\n      return request({\n        url: url,\n        method: 'POST',\n        data: JSON.stringify({ challengeRequest }),\n        timeout: CHALLENGE_TIMEOUT // authenticator should respond within 5 min (300000ms) for challenge request\n      });\n    };\n\n    const onFailure = () => {\n      Logger.error(`Something unexpected happened while we were checking port ${currentPort}.`);\n      return $.Deferred().reject();\n    };\n\n    const doProbing = (domainUrl) => {\n      return checkPort(getAuthenticatorUrl('probe', domainUrl))\n        .then(() => {\n          return onPortFound(getAuthenticatorUrl('challenge', domainUrl))\n            .then(() => {\n              foundPort = true;\n              if (deviceChallenge.enhancedPollingEnabled !== false) {\n                // this way we can gurantee that\n                // 1. the polling is triggered right away (1ms interval)\n                // 2. Only one polling queue\n                // 3. follwoing polling will continue with refresh interval from previous polling response\n                // NOTE: technically, there could still be concurrency issue where when we called stopPolling,\n                // there is already a polling triggered and hasn't completed yet\n                // but the possibility would be much smaller than previous concurrency issue\n                // this is a best effort change\n                this.stopPolling();\n                this.startPolling(1);\n                return;\n              }\n              // once the OV challenge succeeds,\n              // triggers another polling right away without waiting for the next ongoing polling to be triggered\n              // to make the authentication flow goes faster \n              return this.trigger('save', this.model);\n            })\n            .catch((xhr) => {\n              countFailedPorts++;\n              // Windows and MacOS return status code 503 when \n              // there are multiple profiles on the device and\n              // the wrong OS profile responds to the challenge request\n              if (xhr.status !== 503) {\n                // when challenge responds with other errors,\n                // - stop the remaining probing\n                ovFailed = true;\n                // - cancel polling right away\n                cancelPollingWithParams(\n                  this.options.appState,\n                  this.pollingCancelAction,\n                  AUTHENTICATION_CANCEL_REASONS.OV_ERROR,\n                  xhr.status,\n                  !this.removed,\n                );\n              } else if (countFailedPorts === maxNumberOfPorts) {\n                // when challenge is responded by the wrong OS profile and\n                // all the ports are exhausted,\n                // cancel the polling like the probing has failed\n                cancelPollingWithParams(\n                  this.options.appState,\n                  this.pollingCancelAction,\n                  AUTHENTICATION_CANCEL_REASONS.LOOPBACK_FAILURE,\n                  null,\n                  !this.removed,\n                );\n              }\n            });\n        })\n        .catch(onFailure);\n    };\n\n    let probeChain = Promise.resolve();\n\n    const handlePortProbing = (port, baseUrl, checkPortMaxFailure) => {\n      probeChain = probeChain\n        .then(() => {\n          if (!(foundPort || ovFailed)) {\n            currentPort = port;\n            return doProbing(baseUrl);\n          }\n        })\n        .catch(() => {\n          countFailedPorts++;\n          Logger.error(`Authenticator is not listening on port ${currentPort}.`);\n          if (checkPortMaxFailure && countFailedPorts === maxNumberOfPorts) {\n            Logger.error('No available ports. Loopback server failed and polling is cancelled.');\n            // When no port is found, cancel the polling as well\n            // This is to avoid concurrency issue where /poll/cancel takes long time to complete\n            // and SIW will receive 400 error if the polling continues\n            this.stopPolling();\n            cancelPollingWithParams(\n              this.options.appState,\n              this.pollingCancelAction,\n              AUTHENTICATION_CANCEL_REASONS.LOOPBACK_FAILURE,\n              null,\n              !this.removed,\n            );\n          }\n        });\n    };\n\n    // If https domain exists, do https domain probe first\n    // This only applies to MacOS for now\n    if (authenticatorHttpsDomainUrl) {\n      // if https domain are included, max number of ports to be probed should be doubled\n      Logger.info('httpsDomain enabled, will probe and challenge https first');\n      maxNumberOfPorts += maxNumberOfPorts;\n      ports.forEach(port => {\n        handlePortProbing(port, authenticatorHttpsDomainUrl, false);\n      });\n    }\n\n    // Always do probe on regular domain\n    ports.forEach(port => {\n      handlePortProbing(port, authenticatorDomainUrl, true);\n    });\n  },\n\n  doCustomURI() {\n    this.ulDom && this.ulDom.remove();\n    const IframeView = createInvisibleIFrame('custom-uri-container', this.customURI);\n    this.ulDom = this.add(IframeView).last();\n  },\n\n  doChromeDTC(deviceChallenge) {\n    this.ulDom && this.ulDom.remove();\n    const IframeView = createInvisibleIFrame('chrome-dtc-container', deviceChallenge.href);\n    this.ulDom = this.add(IframeView).last();\n  },\n\n  stopProbing() {\n    this.checkPortXhr && this.checkPortXhr.abort();\n    this.probingXhr && this.probingXhr.abort();\n  },\n});\n\nexport default Body;\n"],"names":["request","opts","ajaxOptions","Object","assign","method","contentType","$","ajax","Body","BaseFormWithPolling","extend","noButtonBar","className","removed","events","e","preventDefault","doCustomURI","pollingCancelAction","AUTHENTICATOR_CANCEL_ACTION","initialize","prototype","apply","arguments","listenTo","model","onPollingFail","doChallenge","startPolling","hide","stopPolling","remove","stopProbing","getDeviceChallengePayload","Error","doLoopback","deviceChallenge","authenticatorDomainUrl","domain","undefined","authenticatorHttpsDomainUrl","httpsDomain","ports","maxNumberOfPorts","length","challengeRequest","probeTimeoutMillis","currentPort","foundPort","ovFailed","countFailedPorts","getAuthenticatorUrl","path","domainUrl","checkPort","url","timeout","BrowserFeatures","isAndroid","onPortFound","data","JSON","stringify","CHALLENGE_TIMEOUT","onFailure","Logger","error","Deferred","reject","doProbing","then","enhancedPollingEnabled","trigger","catch","xhr","status","cancelPollingWithParams","options","appState","AUTHENTICATION_CANCEL_REASONS","OV_ERROR","LOOPBACK_FAILURE","probeChain","Promise","resolve","handlePortProbing","port","baseUrl","checkPortMaxFailure","info","forEach","ulDom","IframeView","createInvisibleIFrame","customURI","add","last","doChromeDTC","href","checkPortXhr","abort","probingXhr"],"mappings":"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"}